version: "3.8"

services:
  # Kafka 서비스 (내장 Zookeeper 포함)
  kafka:
    container_name: kafka
    image: bitnami/kafka:3
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=localhost:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - trading_network

  # FastAPI 서비스
  fastapi:
    container_name: fastapi
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./fastapi:/app
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKER=kafka:9092
    networks:
      - trading_network

  # FreqTrade 서비스
  freqtrade:
    container_name: freqtrade
    image: freqtradeorg/freqtrade:stable
    volumes:
      - ./freqtrade_config:/freqtrade/user_data
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKER=kafka:9092
    networks:
      - trading_network
    command:
      [
        "trade",
        "--config",
        "/freqtrade/user_data/config.json",
        "--strategy",
        "BreakoutStrategy",
      ]

volumes:
  kafka_data:
    driver: local

networks:
  trading_network:
    driver: bridge
